@page "/Graph"
@inherits GraphBase
@attribute [Authorize]

<br />
<h2 class="page-title">Graph</h2>

<h3 class="pb-3 mb-4 font-italic border-bottom">
    Testing out a graph structure.
</h3>

<p>
    I set myself a test to create a graph data structure. In the end i would like to create a weighted graph,
    but to start out, I wanted to make a simpel graph, that use a simpel nummer as a node reference starting at 0.<br />
    The edges don't have a value and only know the start and end node. <br />
    A Graph can be made with an Edge List, a Adjacency Matrix or an Adjencecy List, which holds the information about the neightbours.
    I selected the adjency list as it is generaly the recommended approach.<br />
    <br />
</p>
<p>
    I instanciated a fairy simple graph with 8 nodes in a seperate API project, and made a controller, which can be called
    with either a deapth first search approch or a breath first search to return the path by which the target node was hit by the algorithme.<br />
    Nedenfor kan ses et billede af graffen og i de nedenstående formularer kan man teste graffen ved at indtaste search algoritme og start og slutnode.

    <img src="/images/Graph.jpg" alt="Graph">

    Depth first search will be used unless the checkbox is unchecked. If unchecked Breath first search will be used.<br />
</p>


@if (GraphInput != null) {
    <section>

        <EditForm Model="@GraphInput" OnValidSubmit="@HandleValidSubmit">
            <ObjectGraphDataAnnotationsValidator />
            <ValidationSummary />

            <div>
                <InputCheckbox @bind-Value="GraphInput.IsDFS" />
                <label>
                    Use Depth first search?
                </label>
            </div>

            <div class="form-group">
                <label>Start Node:</label>
                <InputNumber @bind-Value="@GraphInput.StartNode" class="form-control" />
                <ValidationMessage For="@(() => GraphInput.StartNode)" />
            </div>
            <div class="form-group">
                <label>Target Node:</label>
                <InputNumber @bind-Value="@GraphInput.TargetNode" class="form-control" />
                <ValidationMessage For="@(() => GraphInput.TargetNode)" />
            </div>


            <button type="submit" class="btn btn-primary">Få ruten.</button>
        </EditForm>

    </section>
}
@if (@PathIsFound) {
    <section>
        The following path was found:
        <ul class="list-group">
            @foreach (var node in Path) {
                <li class="list-group-item">@node.ToString()</li>
            }
        </ul>
    </section>
}

